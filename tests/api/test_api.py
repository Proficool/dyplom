import os
import pytest
import allure
import requests
import psycopg2


# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î (–∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è)
DB_PARAMS = {
    'dbname': os.environ.get('POSTGRES_DB', 'taskmanager'),
    'user': os.environ.get('POSTGRES_USER', 'postgres'),
    'password': os.environ.get('POSTGRES_PASSWORD', 'postgres'),
    'host': os.environ.get('POSTGRES_HOST', 'db'),
    'port': os.environ.get('POSTGRES_PORT', '5432')
}

# URL API-—Å–µ—Ä–≤–µ—Ä–∞
BASE_URL = "http://web:5000/api"

# –î–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
TEST_USER = {"username": "testuser1", "password": "testpass"}


@pytest.fixture(scope="function")
def db_connection():
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î"""
    print("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î...")
    conn = psycopg2.connect(**DB_PARAMS)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î
    yield conn  # –ü–µ—Ä–µ–¥–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤ —Ç–µ—Å—Ç
    conn.close()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞
    print("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∑–∞–∫—Ä—ã—Ç–æ.")


@pytest.fixture(scope="function")
def session(db_connection):
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è HTTP-—Å–µ—Å—Å–∏–∏ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ"""
    session = requests.Session()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
    cursor = db_connection.cursor()
    print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {TEST_USER['username']} –≤ –ë–î...")
    cursor.execute('SELECT id FROM "user" WHERE username = %s', (TEST_USER["username"],))
    user = cursor.fetchone()
    cursor.close()

    if not user:
        print(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {TEST_USER['username']} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î. –°–æ–∑–¥–∞—é –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")

        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ API
        register_response = session.post(f"{BASE_URL}/register", json=TEST_USER)
        assert register_response.status_code == 201, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {register_response.text}"

        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {TEST_USER['username']} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")

    # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    print(f"üîë –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ API –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {TEST_USER['username']}")
    login_response = session.post(f"{BASE_URL}/login", json=TEST_USER)

    assert login_response.status_code == 200, f"‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É: {login_response.text}"
    print("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É!")

    return session  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—É—é —Å–µ—Å—Å–∏—é


@allure.feature("API –¢–µ—Å—Ç")
@allure.story("–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏")
def test_full_task_creation(db_connection, session):
    """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —É—Å–ø–µ—à–Ω–æ –ª–æ–≥–∏–Ω–∏—Ç—Å—è, —Å–æ–∑–¥–∞–µ—Ç –∑–∞–¥–∞—á—É –∏ –æ–Ω–∞ –µ—Å—Ç—å –≤ –ë–î"""

    with allure.step("–ü–æ–ª—É—á–µ–Ω–∏–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î"):
        cursor = db_connection.cursor()
        cursor.execute('SELECT id FROM "user" WHERE username = %s', (TEST_USER["username"],))
        user = cursor.fetchone()
        cursor.close()
        assert user is not None, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {TEST_USER['username']} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î!"
        user_id = user[0]
        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ –ë–î: ID {user_id}")

    with allure.step("–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ API"):
        task_data = {
            "title": "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞",
            "description": "–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞–¥–∞—á–∏",
            "completed": False
        }
        print("üì© –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏...")
        create_task_response = session.post(f"{BASE_URL}/tasks", json=task_data)
        print(f"üì© –û—Ç–≤–µ—Ç API –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏: {create_task_response.status_code}")

        assert create_task_response.status_code == 201, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {create_task_response.text}"
        created_task = create_task_response.json()
        assert "id" in created_task, "‚ùå –û—Ç–≤–µ—Ç API –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç 'id' —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏!"
        task_id = created_task["id"]
        print(f"‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞! ID: {task_id}")

    with allure.step("–ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∑–∞–¥–∞—á–∞ –∑–∞–ø–∏—Å–∞–Ω–∞ –≤ –ë–î"):
        print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞—á–∏ {task_id} –≤ –ë–î...")
        cursor = db_connection.cursor()
        cursor.execute("SELECT id, title, description FROM task WHERE id = %s", (task_id,))
        task = cursor.fetchone()
        cursor.close()
        assert task is not None, f"‚ùå –ó–∞–¥–∞—á–∞ —Å ID {task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î!"
        print(f"‚úÖ –ó–∞–¥–∞—á–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î: {task}")
